#include <ctime>
#include <iostream>
#include <list>
#include <vector>
#include <set>
#include <limits>
#include <limits.h>

using namespace std;

/******************************
 * Graph class that uses an adjacency 
 * list internally
 ******************************/
class Graph {

    private:
        int vertices;
        int edges;
        bool to_rm(const pair<int, float>&p, int rm) { return p.first == rm; }

    public:
        list<pair<int, float>> *adj_list;
        // Class constructor
        Graph(int size) {
            vertices = size;
            adj_list = new list<pair<int, float>>[size];

            edges = 0;
        }

        int v() const
        {
            return vertices;
        }

        int e()
        {
            return edges;
        }

        void add_edge(int x, int y, float distance)
        {
            adj_list[x].push_back(make_pair(y, distance));
            adj_list[y].push_back(make_pair(x, distance));
            edges++;
            return;
        }

        void delete_edge(int x, int y)
        {
            // TODO
            return;
        }

        bool adjacent(int x, int y)
        {
            list<pair<int, float>>::iterator it;
            for (it = adj_list[x].begin(); it != adj_list[x].end(); ++it) {
                if (it->first == y)
                    return true;
            }

            return false;
        }

        void neighbors(int x)
        {
            return;
        }

        int get_edge_value(int x, int y)
        {
            list<pair<int, float>>::iterator it;
            for (it = adj_list[x].begin(); it != adj_list[x].end(); ++it) {
                if (it->first == y)
                    return it->second;
            }
        }

        void set_edge_value(int x, int y, float val)
        {
            return;
        }

        void disp()
        {
            for (int i = 0; i < edges; i++) {
                cout << "edge: " << i;
                list<pair<int, float>>::iterator it;
                for (it = adj_list[i].begin(); it != adj_list[i].end(); ++it) {
                    cout << " neighbor: " << it->first << " dist: " << it->second << endl;
                }
            }
        }
};

class ShortestPath {
    private:
        const Graph &graph;
        vector<int> actual_path;
        int distance;
    public:
        ShortestPath(const Graph &g): graph(g) {}
        
        int path(int src, int dst)
        {
            // geeksforgeeks + wikipedia
            vector<int> path;
            set<pair<float, int>> pre_set;
            pre_set.insert(make_pair(0, src));
            vector<float> ret(graph.v(), numeric_limits<float>::infinity());
            ret[src] = 0;

            while (!pre_set.empty()) {
                pair<int, float> tmp = *(pre_set.begin());
                pre_set.erase(pre_set.begin());

                int x = tmp.second;
                list<pair<int, float>>::iterator it;
                for (it = graph.adj_list[x].begin(); it != graph.adj_list[x].end(); ++it) {
                    int y = (*it).first;
                    float weight = (*it).second;

                    if (ret[y] > ret[x] + weight) {
                        if (ret[y] != numeric_limits<float>::infinity())
                            pre_set.erase(pre_set.find(make_pair(ret[y], y)));

						path.push_back(x);
                        ret[y] = ret[x] + weight;
                        pre_set.insert(make_pair(ret[y], y));
                    }
                }

            }

            return ret[dst];
        }
};

void run_simulation(const float DENSITY, const float DIST_RANGE[2])
{
    const int NODES = 50;
    Graph graph(NODES);

    // Generate up to NODES edges
    for (int i = 0; i < NODES; i++) {

        for (int j = 0; j < NODES; j++) {
            float d = static_cast<float>(rand() / static_cast<float>(RAND_MAX/10.0));
            float r = static_cast<float>(rand() / static_cast<float>(RAND_MAX));
            if (r < DENSITY) {
                graph.add_edge(i, j, d);
            }
        }

    }


    ShortestPath p(graph);

    float tot = 0, num = 0;
    for (int i = 0; i < NODES; i++) {
        int dist = p.path(0, i);
        if (dist > 0) {
            tot += dist;
            num++;
        }
    }
    cout << "Average distance for density " << DENSITY << ": " << tot / num << endl;

    return;
}

int main(void)
{

    // Seed the programs rand() calls
    srand(time(nullptr));

    const float r[] = {1.0, 10.0};
    run_simulation(0.2, r);
    run_simulation(0.4, r);

    return 0;
}
/*************************************************************************
This week I relearned graph theory, Dijkstra's algorthm, and some basic OOP
principles with C++. This was a great project to learn these concepts and 
I feel comfortable using classes in C++ now. This was my first time using 
the 'new' keyword for heap allocations in C++. The new syntax was 
unfamiliar but easy to pick up. I also learned about C++ constructors and 
destructors. OOP makes it simpler to program and think about concepts that
tie data and methods together. It was nice to use when creating a graph 
data structure. I chose to use an adjacency list for this graph 
implementation because it is much more memory efficient. For large 
amounts of nodes, my implementation uses far less memory than a matrix of
equivalent nodes. The wikipedia page and geeksforgeeks references for 
Dijkstra's algorithm were great aids in implementing it. After this project 
I feel more confortable using C++'s OOP features. This was my first time 
writing a Monte Carlo simulation but it was straightforward to do so. I 
used my Graph::display() method on small number of nodes to debug my code.
This was very helpful and I would suggest that to other students.
*************************************************************************/
